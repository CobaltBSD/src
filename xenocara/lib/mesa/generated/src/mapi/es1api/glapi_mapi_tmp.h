/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#ifndef _GLAPI_TMP_H_
#define _GLAPI_TMP_H_
#endif /* _GLAPI_TMP_H_ */

#ifdef MAPI_TMP_DEFINES
#include "util/glheader.h"

GLAPI void GLAPIENTRY glActiveTexture(GLenum texture);
GLAPI void GLAPIENTRY glAlphaFunc(GLenum func, GLfloat ref);
GLAPI void GLAPIENTRY glAlphaFuncx(GLenum func, GLfixed ref);
GLAPI void GLAPIENTRY glBindBuffer(GLenum target, GLuint buffer);
GLAPI void GLAPIENTRY glBindTexture(GLenum target, GLuint texture);
GLAPI void GLAPIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
GLAPI void GLAPIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLAPI void GLAPIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI void GLAPIENTRY glClear(GLbitfield mask);
GLAPI void GLAPIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void GLAPIENTRY glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI void GLAPIENTRY glClearDepthf(GLfloat d);
GLAPI void GLAPIENTRY glClearDepthx(GLfixed depth);
GLAPI void GLAPIENTRY glClearStencil(GLint s);
GLAPI void GLAPIENTRY glClientActiveTexture(GLenum texture);
GLAPI void GLAPIENTRY glClipPlanef(GLenum p, const GLfloat *eqn);
GLAPI void GLAPIENTRY glClipPlanex(GLenum plane, const GLfixed *equation);
GLAPI void GLAPIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI void GLAPIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
GLAPI void GLAPIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI void GLAPIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void GLAPIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI void GLAPIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLAPI void GLAPIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI void GLAPIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void GLAPIENTRY glCullFace(GLenum mode);
GLAPI void GLAPIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers);
GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
GLAPI void GLAPIENTRY glDepthFunc(GLenum func);
GLAPI void GLAPIENTRY glDepthMask(GLboolean flag);
GLAPI void GLAPIENTRY glDepthRangef(GLfloat n, GLfloat f);
GLAPI void GLAPIENTRY glDepthRangex(GLfixed n, GLfixed f);
GLAPI void GLAPIENTRY glDisable(GLenum cap);
GLAPI void GLAPIENTRY glDisableClientState(GLenum array);
GLAPI void GLAPIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
GLAPI void GLAPIENTRY glEnable(GLenum cap);
GLAPI void GLAPIENTRY glEnableClientState(GLenum array);
GLAPI void GLAPIENTRY glFinish(void);
GLAPI void GLAPIENTRY glFlush(void);
GLAPI void GLAPIENTRY glFogf(GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glFogfv(GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glFogx(GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glFogxv(GLenum pname, const GLfixed *param);
GLAPI void GLAPIENTRY glFrontFace(GLenum mode);
GLAPI void GLAPIENTRY glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
GLAPI void GLAPIENTRY glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
GLAPI void GLAPIENTRY glGenBuffers(GLsizei n, GLuint *buffers);
GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures);
GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *data);
GLAPI void GLAPIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void GLAPIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation);
GLAPI void GLAPIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation);
GLAPI GLenum GLAPIENTRY glGetError(void);
GLAPI void GLAPIENTRY glGetFixedv(GLenum pname, GLfixed *params);
GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *data);
GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *data);
GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
GLAPI void GLAPIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params);
GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
GLAPI void GLAPIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params);
GLAPI void GLAPIENTRY glGetPointerv(GLenum pname, void **params);
GLAPI const GLubyte * GLAPIENTRY glGetString(GLenum name);
GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
GLAPI void GLAPIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params);
GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
GLAPI void GLAPIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params);
GLAPI void GLAPIENTRY glHint(GLenum target, GLenum mode);
GLAPI GLboolean GLAPIENTRY glIsBuffer(GLuint buffer);
GLAPI GLboolean GLAPIENTRY glIsEnabled(GLenum cap);
GLAPI GLboolean GLAPIENTRY glIsTexture(GLuint texture);
GLAPI void GLAPIENTRY glLightModelf(GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glLightModelx(GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glLightModelxv(GLenum pname, const GLfixed *param);
GLAPI void GLAPIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glLightx(GLenum light, GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params);
GLAPI void GLAPIENTRY glLineWidth(GLfloat width);
GLAPI void GLAPIENTRY glLineWidthx(GLfixed width);
GLAPI void GLAPIENTRY glLoadIdentity(void);
GLAPI void GLAPIENTRY glLoadMatrixf(const GLfloat *m);
GLAPI void GLAPIENTRY glLoadMatrixx(const GLfixed *m);
GLAPI void GLAPIENTRY glLogicOp(GLenum opcode);
GLAPI void GLAPIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *param);
GLAPI void GLAPIENTRY glMatrixMode(GLenum mode);
GLAPI void GLAPIENTRY glMultMatrixf(const GLfloat *m);
GLAPI void GLAPIENTRY glMultMatrixx(const GLfixed *m);
GLAPI void GLAPIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLAPI void GLAPIENTRY glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
GLAPI void GLAPIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
GLAPI void GLAPIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz);
GLAPI void GLAPIENTRY glNormalPointer(GLenum type, GLsizei stride, const void *pointer);
GLAPI void GLAPIENTRY glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
GLAPI void GLAPIENTRY glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
GLAPI void GLAPIENTRY glPixelStorei(GLenum pname, GLint param);
GLAPI void GLAPIENTRY glPointParameterf(GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glPointParameterfv(GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glPointParameterx(GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glPointParameterxv(GLenum pname, const GLfixed *params);
GLAPI void GLAPIENTRY glPointSize(GLfloat size);
GLAPI void GLAPIENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const void *pointer);
GLAPI void GLAPIENTRY glPointSizex(GLfixed size);
GLAPI void GLAPIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
GLAPI void GLAPIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units);
GLAPI void GLAPIENTRY glPopMatrix(void);
GLAPI void GLAPIENTRY glPushMatrix(void);
GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI void GLAPIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLAPI void GLAPIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
GLAPI void GLAPIENTRY glSampleCoverage(GLfloat value, GLboolean invert);
GLAPI void GLAPIENTRY glSampleCoveragex(GLclampx value, GLboolean invert);
GLAPI void GLAPIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
GLAPI void GLAPIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z);
GLAPI void GLAPIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void GLAPIENTRY glShadeModel(GLenum mode);
GLAPI void GLAPIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
GLAPI void GLAPIENTRY glStencilMask(GLuint mask);
GLAPI void GLAPIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void GLAPIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void GLAPIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
GLAPI void GLAPIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
GLAPI void GLAPIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI void GLAPIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GLAPI void GLAPIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void GLAPIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void GLAPIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
GLAPI void GLAPIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param);
GLAPI void GLAPIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLAPI void GLAPIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
GLAPI void GLAPIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z);
GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLAPI void GLAPIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
GLAPI void GLAPIENTRY glActiveTexture(GLenum texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[374];
   ((void (GLAPIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void GLAPIENTRY glAlphaFunc(GLenum func, GLfloat ref)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[240];
   ((void (GLAPIENTRY *)(GLenum func, GLfloat ref)) _func)(func, ref);
}

GLAPI void GLAPIENTRY glAlphaFuncx(GLenum func, GLfixed ref)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1375];
   ((void (GLAPIENTRY *)(GLenum func, GLfixed ref)) _func)(func, ref);
}

GLAPI void GLAPIENTRY glBindBuffer(GLenum target, GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[461];
   ((void (GLAPIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

GLAPI void GLAPIENTRY glBindTexture(GLenum target, GLuint texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[307];
   ((void (GLAPIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

GLAPI void GLAPIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[241];
   ((void (GLAPIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

GLAPI void GLAPIENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[462];
   ((void (GLAPIENTRY *)(GLenum target, GLsizeiptr size, const void *data, GLenum usage)) _func)(target, size, data, usage);
}

GLAPI void GLAPIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[463];
   ((void (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)) _func)(target, offset, size, data);
}

GLAPI void GLAPIENTRY glClear(GLbitfield mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[203];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

GLAPI void GLAPIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[206];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1376];
   ((void (GLAPIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glClearDepthf(GLfloat d)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[813];
   ((void (GLAPIENTRY *)(GLfloat d)) _func)(d);
}

GLAPI void GLAPIENTRY glClearDepthx(GLfixed depth)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1377];
   ((void (GLAPIENTRY *)(GLfixed depth)) _func)(depth);
}

GLAPI void GLAPIENTRY glClearStencil(GLint s)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[207];
   ((void (GLAPIENTRY *)(GLint s)) _func)(s);
}

GLAPI void GLAPIENTRY glClientActiveTexture(GLenum texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[375];
   ((void (GLAPIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void GLAPIENTRY glClipPlanef(GLenum p, const GLfloat *eqn)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1406];
   ((void (GLAPIENTRY *)(GLenum p, const GLfloat *eqn)) _func)(p, eqn);
}

GLAPI void GLAPIENTRY glClipPlanex(GLenum plane, const GLfixed *equation)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1407];
   ((void (GLAPIENTRY *)(GLenum plane, const GLfixed *equation)) _func)(plane, equation);
}

GLAPI void GLAPIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[29];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[35];
   ((void (GLAPIENTRY *)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1378];
   ((void (GLAPIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[210];
   ((void (GLAPIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

GLAPI void GLAPIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[308];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const void *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void GLAPIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[409];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

GLAPI void GLAPIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[412];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

GLAPI void GLAPIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[324];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

GLAPI void GLAPIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[326];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

GLAPI void GLAPIENTRY glCullFace(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[152];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void GLAPIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[464];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *buffers)) _func)(n, buffers);
}

GLAPI void GLAPIENTRY glDeleteTextures(GLsizei n, const GLuint *textures)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[327];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

GLAPI void GLAPIENTRY glDepthFunc(GLenum func)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[245];
   ((void (GLAPIENTRY *)(GLenum func)) _func)(func);
}

GLAPI void GLAPIENTRY glDepthMask(GLboolean flag)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[211];
   ((void (GLAPIENTRY *)(GLboolean flag)) _func)(flag);
}

GLAPI void GLAPIENTRY glDepthRangef(GLfloat n, GLfloat f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[814];
   ((void (GLAPIENTRY *)(GLfloat n, GLfloat f)) _func)(n, f);
}

GLAPI void GLAPIENTRY glDepthRangex(GLfixed n, GLfixed f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1379];
   ((void (GLAPIENTRY *)(GLfixed n, GLfixed f)) _func)(n, f);
}

GLAPI void GLAPIENTRY glDisable(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[214];
   ((void (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void GLAPIENTRY glDisableClientState(GLenum array)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[309];
   ((void (GLAPIENTRY *)(GLenum array)) _func)(array);
}

GLAPI void GLAPIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[310];
   ((void (GLAPIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

GLAPI void GLAPIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[311];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void *indices)) _func)(mode, count, type, indices);
}

GLAPI void GLAPIENTRY glEnable(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[215];
   ((void (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void GLAPIENTRY glEnableClientState(GLenum array)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[313];
   ((void (GLAPIENTRY *)(GLenum array)) _func)(array);
}

GLAPI void GLAPIENTRY glFinish(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[216];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glFlush(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[217];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glFogf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[153];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glFogfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[154];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void GLAPIENTRY glFogx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1380];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glFogxv(GLenum pname, const GLfixed *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1381];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glFrontFace(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[157];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void GLAPIENTRY glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1382];
   ((void (GLAPIENTRY *)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)) _func)(l, r, b, t, n, f);
}

GLAPI void GLAPIENTRY glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1383];
   ((void (GLAPIENTRY *)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)) _func)(l, r, b, t, n, f);
}

GLAPI void GLAPIENTRY glGenBuffers(GLsizei n, GLuint *buffers)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[467];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *buffers)) _func)(n, buffers);
}

GLAPI void GLAPIENTRY glGenTextures(GLsizei n, GLuint *textures)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[328];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

GLAPI void GLAPIENTRY glGetBooleanv(GLenum pname, GLboolean *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[258];
   ((void (GLAPIENTRY *)(GLenum pname, GLboolean *data)) _func)(pname, data);
}

GLAPI void GLAPIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[469];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1408];
   ((void (GLAPIENTRY *)(GLenum plane, GLfloat *equation)) _func)(plane, equation);
}

GLAPI void GLAPIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1409];
   ((void (GLAPIENTRY *)(GLenum plane, GLfixed *equation)) _func)(plane, equation);
}

GLAPI GLenum GLAPIENTRY glGetError(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[261];
   return ((GLenum (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glGetFixedv(GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1410];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed *params)) _func)(pname, params);
}

GLAPI void GLAPIENTRY glGetFloatv(GLenum pname, GLfloat *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[262];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat *data)) _func)(pname, data);
}

GLAPI void GLAPIENTRY glGetIntegerv(GLenum pname, GLint *data)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[263];
   ((void (GLAPIENTRY *)(GLenum pname, GLint *data)) _func)(pname, data);
}

GLAPI void GLAPIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[264];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfloat *params)) _func)(light, pname, params);
}

GLAPI void GLAPIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1411];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfixed *params)) _func)(light, pname, params);
}

GLAPI void GLAPIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[269];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfloat *params)) _func)(face, pname, params);
}

GLAPI void GLAPIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1412];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfixed *params)) _func)(face, pname, params);
}

GLAPI void GLAPIENTRY glGetPointerv(GLenum pname, void **params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[329];
   ((void (GLAPIENTRY *)(GLenum pname, void **params)) _func)(pname, params);
}

GLAPI const GLubyte * GLAPIENTRY glGetString(GLenum name)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[275];
   return ((const GLubyte * (GLAPIENTRY *)(GLenum name)) _func)(name);
}

GLAPI void GLAPIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[276];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[277];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1413];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[282];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[283];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1414];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glHint(GLenum target, GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[158];
   ((void (GLAPIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

GLAPI GLboolean GLAPIENTRY glIsBuffer(GLuint buffer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[475];
   return ((GLboolean (GLAPIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLAPI GLboolean GLAPIENTRY glIsEnabled(GLenum cap)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[286];
   return ((GLboolean (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI GLboolean GLAPIENTRY glIsTexture(GLuint texture)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[330];
   return ((GLboolean (GLAPIENTRY *)(GLuint texture)) _func)(texture);
}

GLAPI void GLAPIENTRY glLightModelf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[163];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glLightModelfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[164];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void GLAPIENTRY glLightModelx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1384];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glLightModelxv(GLenum pname, const GLfixed *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1385];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glLightf(GLenum light, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[159];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfloat param)) _func)(light, pname, param);
}

GLAPI void GLAPIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[160];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, const GLfloat *params)) _func)(light, pname, params);
}

GLAPI void GLAPIENTRY glLightx(GLenum light, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1386];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfixed param)) _func)(light, pname, param);
}

GLAPI void GLAPIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1387];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, const GLfixed *params)) _func)(light, pname, params);
}

GLAPI void GLAPIENTRY glLineWidth(GLfloat width)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[168];
   ((void (GLAPIENTRY *)(GLfloat width)) _func)(width);
}

GLAPI void GLAPIENTRY glLineWidthx(GLfixed width)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1388];
   ((void (GLAPIENTRY *)(GLfixed width)) _func)(width);
}

GLAPI void GLAPIENTRY glLoadIdentity(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[290];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glLoadMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[291];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

GLAPI void GLAPIENTRY glLoadMatrixx(const GLfixed *m)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1389];
   ((void (GLAPIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void GLAPIENTRY glLogicOp(GLenum opcode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[242];
   ((void (GLAPIENTRY *)(GLenum opcode)) _func)(opcode);
}

GLAPI void GLAPIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[169];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfloat param)) _func)(face, pname, param);
}

GLAPI void GLAPIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[170];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, const GLfloat *params)) _func)(face, pname, params);
}

GLAPI void GLAPIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1390];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfixed param)) _func)(face, pname, param);
}

GLAPI void GLAPIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1391];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, const GLfixed *param)) _func)(face, pname, param);
}

GLAPI void GLAPIENTRY glMatrixMode(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[293];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void GLAPIENTRY glMultMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[294];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

GLAPI void GLAPIENTRY glMultMatrixx(const GLfixed *m)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1392];
   ((void (GLAPIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void GLAPIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[402];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(target, s, t, r, q);
}

GLAPI void GLAPIENTRY glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1393];
   ((void (GLAPIENTRY *)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)) _func)(texture, s, t, r, q);
}

GLAPI void GLAPIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[56];
   ((void (GLAPIENTRY *)(GLfloat nx, GLfloat ny, GLfloat nz)) _func)(nx, ny, nz);
}

GLAPI void GLAPIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1394];
   ((void (GLAPIENTRY *)(GLfixed nx, GLfixed ny, GLfixed nz)) _func)(nx, ny, nz);
}

GLAPI void GLAPIENTRY glNormalPointer(GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[318];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const void *pointer)) _func)(type, stride, pointer);
}

GLAPI void GLAPIENTRY glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1395];
   ((void (GLAPIENTRY *)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)) _func)(l, r, b, t, n, f);
}

GLAPI void GLAPIENTRY glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1396];
   ((void (GLAPIENTRY *)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)) _func)(l, r, b, t, n, f);
}

GLAPI void GLAPIENTRY glPixelStorei(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[250];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glPointParameterf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[425];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glPointParameterfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[426];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void GLAPIENTRY glPointParameterx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1415];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void GLAPIENTRY glPointParameterxv(GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1416];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void GLAPIENTRY glPointSize(GLfloat size)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[173];
   ((void (GLAPIENTRY *)(GLfloat size)) _func)(size);
}

GLAPI void GLAPIENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1087];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const void *pointer)) _func)(type, stride, pointer);
}

GLAPI void GLAPIENTRY glPointSizex(GLfixed size)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1397];
   ((void (GLAPIENTRY *)(GLfixed size)) _func)(size);
}

GLAPI void GLAPIENTRY glPolygonOffset(GLfloat factor, GLfloat units)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[319];
   ((void (GLAPIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

GLAPI void GLAPIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1398];
   ((void (GLAPIENTRY *)(GLfixed factor, GLfixed units)) _func)(factor, units);
}

GLAPI void GLAPIENTRY glPopMatrix(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[297];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glPushMatrix(void)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[298];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLAPI void GLAPIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[256];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)) _func)(x, y, width, height, format, type, pixels);
}

GLAPI void GLAPIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[300];
   ((void (GLAPIENTRY *)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) _func)(angle, x, y, z);
}

GLAPI void GLAPIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1399];
   ((void (GLAPIENTRY *)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)) _func)(angle, x, y, z);
}

GLAPI void GLAPIENTRY glSampleCoverage(GLfloat value, GLboolean invert)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[419];
   ((void (GLAPIENTRY *)(GLfloat value, GLboolean invert)) _func)(value, invert);
}

GLAPI void GLAPIENTRY glSampleCoveragex(GLclampx value, GLboolean invert)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1400];
   ((void (GLAPIENTRY *)(GLclampx value, GLboolean invert)) _func)(value, invert);
}

GLAPI void GLAPIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[302];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

GLAPI void GLAPIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1401];
   ((void (GLAPIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void GLAPIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[176];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void GLAPIENTRY glShadeModel(GLenum mode)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[177];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void GLAPIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[243];
   ((void (GLAPIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

GLAPI void GLAPIENTRY glStencilMask(GLuint mask)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[209];
   ((void (GLAPIENTRY *)(GLuint mask)) _func)(mask);
}

GLAPI void GLAPIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[244];
   ((void (GLAPIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

GLAPI void GLAPIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[320];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const void *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void GLAPIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[184];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[185];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[186];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[187];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1402];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1403];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[183];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

GLAPI void GLAPIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[178];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[179];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[180];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[181];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1404];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void GLAPIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1417];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void GLAPIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[333];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

GLAPI void GLAPIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[304];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

GLAPI void GLAPIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1405];
   ((void (GLAPIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void GLAPIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[321];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const void *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void GLAPIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[305];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}


#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#undef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
__asm__(
STUB_ASM_ENTRY("glActiveTexture")"\n"
"\t"STUB_ASM_CODE("374")"\n"

STUB_ASM_ENTRY("glAlphaFunc")"\n"
"\t"STUB_ASM_CODE("240")"\n"

STUB_ASM_ENTRY("glAlphaFuncx")"\n"
"\t"STUB_ASM_CODE("1375")"\n"

STUB_ASM_ENTRY("glBindBuffer")"\n"
"\t"STUB_ASM_CODE("461")"\n"

STUB_ASM_ENTRY("glBindTexture")"\n"
"\t"STUB_ASM_CODE("307")"\n"

STUB_ASM_ENTRY("glBlendFunc")"\n"
"\t"STUB_ASM_CODE("241")"\n"

STUB_ASM_ENTRY("glBufferData")"\n"
"\t"STUB_ASM_CODE("462")"\n"

STUB_ASM_ENTRY("glBufferSubData")"\n"
"\t"STUB_ASM_CODE("463")"\n"

STUB_ASM_ENTRY("glClear")"\n"
"\t"STUB_ASM_CODE("203")"\n"

STUB_ASM_ENTRY("glClearColor")"\n"
"\t"STUB_ASM_CODE("206")"\n"

STUB_ASM_ENTRY("glClearColorx")"\n"
"\t"STUB_ASM_CODE("1376")"\n"

STUB_ASM_ENTRY("glClearDepthf")"\n"
"\t"STUB_ASM_CODE("813")"\n"

STUB_ASM_ENTRY("glClearDepthx")"\n"
"\t"STUB_ASM_CODE("1377")"\n"

STUB_ASM_ENTRY("glClearStencil")"\n"
"\t"STUB_ASM_CODE("207")"\n"

STUB_ASM_ENTRY("glClientActiveTexture")"\n"
"\t"STUB_ASM_CODE("375")"\n"

STUB_ASM_ENTRY("glClipPlanef")"\n"
"\t"STUB_ASM_CODE("1406")"\n"

STUB_ASM_ENTRY("glClipPlanex")"\n"
"\t"STUB_ASM_CODE("1407")"\n"

STUB_ASM_ENTRY("glColor4f")"\n"
"\t"STUB_ASM_CODE("29")"\n"

STUB_ASM_ENTRY("glColor4ub")"\n"
"\t"STUB_ASM_CODE("35")"\n"

STUB_ASM_ENTRY("glColor4x")"\n"
"\t"STUB_ASM_CODE("1378")"\n"

STUB_ASM_ENTRY("glColorMask")"\n"
"\t"STUB_ASM_CODE("210")"\n"

STUB_ASM_ENTRY("glColorPointer")"\n"
"\t"STUB_ASM_CODE("308")"\n"

STUB_ASM_ENTRY("glCompressedTexImage2D")"\n"
"\t"STUB_ASM_CODE("409")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("412")"\n"

STUB_ASM_ENTRY("glCopyTexImage2D")"\n"
"\t"STUB_ASM_CODE("324")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("326")"\n"

STUB_ASM_ENTRY("glCullFace")"\n"
"\t"STUB_ASM_CODE("152")"\n"

STUB_ASM_ENTRY("glDeleteBuffers")"\n"
"\t"STUB_ASM_CODE("464")"\n"

STUB_ASM_ENTRY("glDeleteTextures")"\n"
"\t"STUB_ASM_CODE("327")"\n"

STUB_ASM_ENTRY("glDepthFunc")"\n"
"\t"STUB_ASM_CODE("245")"\n"

STUB_ASM_ENTRY("glDepthMask")"\n"
"\t"STUB_ASM_CODE("211")"\n"

STUB_ASM_ENTRY("glDepthRangef")"\n"
"\t"STUB_ASM_CODE("814")"\n"

STUB_ASM_ENTRY("glDepthRangex")"\n"
"\t"STUB_ASM_CODE("1379")"\n"

STUB_ASM_ENTRY("glDisable")"\n"
"\t"STUB_ASM_CODE("214")"\n"

STUB_ASM_ENTRY("glDisableClientState")"\n"
"\t"STUB_ASM_CODE("309")"\n"

STUB_ASM_ENTRY("glDrawArrays")"\n"
"\t"STUB_ASM_CODE("310")"\n"

STUB_ASM_ENTRY("glDrawElements")"\n"
"\t"STUB_ASM_CODE("311")"\n"

STUB_ASM_ENTRY("glEnable")"\n"
"\t"STUB_ASM_CODE("215")"\n"

STUB_ASM_ENTRY("glEnableClientState")"\n"
"\t"STUB_ASM_CODE("313")"\n"

STUB_ASM_ENTRY("glFinish")"\n"
"\t"STUB_ASM_CODE("216")"\n"

STUB_ASM_ENTRY("glFlush")"\n"
"\t"STUB_ASM_CODE("217")"\n"

STUB_ASM_ENTRY("glFogf")"\n"
"\t"STUB_ASM_CODE("153")"\n"

STUB_ASM_ENTRY("glFogfv")"\n"
"\t"STUB_ASM_CODE("154")"\n"

STUB_ASM_ENTRY("glFogx")"\n"
"\t"STUB_ASM_CODE("1380")"\n"

STUB_ASM_ENTRY("glFogxv")"\n"
"\t"STUB_ASM_CODE("1381")"\n"

STUB_ASM_ENTRY("glFrontFace")"\n"
"\t"STUB_ASM_CODE("157")"\n"

STUB_ASM_ENTRY("glFrustumf")"\n"
"\t"STUB_ASM_CODE("1382")"\n"

STUB_ASM_ENTRY("glFrustumx")"\n"
"\t"STUB_ASM_CODE("1383")"\n"

STUB_ASM_ENTRY("glGenBuffers")"\n"
"\t"STUB_ASM_CODE("467")"\n"

STUB_ASM_ENTRY("glGenTextures")"\n"
"\t"STUB_ASM_CODE("328")"\n"

STUB_ASM_ENTRY("glGetBooleanv")"\n"
"\t"STUB_ASM_CODE("258")"\n"

STUB_ASM_ENTRY("glGetBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("469")"\n"

STUB_ASM_ENTRY("glGetClipPlanef")"\n"
"\t"STUB_ASM_CODE("1408")"\n"

STUB_ASM_ENTRY("glGetClipPlanex")"\n"
"\t"STUB_ASM_CODE("1409")"\n"

STUB_ASM_ENTRY("glGetError")"\n"
"\t"STUB_ASM_CODE("261")"\n"

STUB_ASM_ENTRY("glGetFixedv")"\n"
"\t"STUB_ASM_CODE("1410")"\n"

STUB_ASM_ENTRY("glGetFloatv")"\n"
"\t"STUB_ASM_CODE("262")"\n"

STUB_ASM_ENTRY("glGetIntegerv")"\n"
"\t"STUB_ASM_CODE("263")"\n"

STUB_ASM_ENTRY("glGetLightfv")"\n"
"\t"STUB_ASM_CODE("264")"\n"

STUB_ASM_ENTRY("glGetLightxv")"\n"
"\t"STUB_ASM_CODE("1411")"\n"

STUB_ASM_ENTRY("glGetMaterialfv")"\n"
"\t"STUB_ASM_CODE("269")"\n"

STUB_ASM_ENTRY("glGetMaterialxv")"\n"
"\t"STUB_ASM_CODE("1412")"\n"

STUB_ASM_ENTRY("glGetPointerv")"\n"
"\t"STUB_ASM_CODE("329")"\n"

STUB_ASM_ENTRY("glGetString")"\n"
"\t"STUB_ASM_CODE("275")"\n"

STUB_ASM_ENTRY("glGetTexEnvfv")"\n"
"\t"STUB_ASM_CODE("276")"\n"

STUB_ASM_ENTRY("glGetTexEnviv")"\n"
"\t"STUB_ASM_CODE("277")"\n"

STUB_ASM_ENTRY("glGetTexEnvxv")"\n"
"\t"STUB_ASM_CODE("1413")"\n"

STUB_ASM_ENTRY("glGetTexParameterfv")"\n"
"\t"STUB_ASM_CODE("282")"\n"

STUB_ASM_ENTRY("glGetTexParameteriv")"\n"
"\t"STUB_ASM_CODE("283")"\n"

STUB_ASM_ENTRY("glGetTexParameterxv")"\n"
"\t"STUB_ASM_CODE("1414")"\n"

STUB_ASM_ENTRY("glHint")"\n"
"\t"STUB_ASM_CODE("158")"\n"

STUB_ASM_ENTRY("glIsBuffer")"\n"
"\t"STUB_ASM_CODE("475")"\n"

STUB_ASM_ENTRY("glIsEnabled")"\n"
"\t"STUB_ASM_CODE("286")"\n"

STUB_ASM_ENTRY("glIsTexture")"\n"
"\t"STUB_ASM_CODE("330")"\n"

STUB_ASM_ENTRY("glLightModelf")"\n"
"\t"STUB_ASM_CODE("163")"\n"

STUB_ASM_ENTRY("glLightModelfv")"\n"
"\t"STUB_ASM_CODE("164")"\n"

STUB_ASM_ENTRY("glLightModelx")"\n"
"\t"STUB_ASM_CODE("1384")"\n"

STUB_ASM_ENTRY("glLightModelxv")"\n"
"\t"STUB_ASM_CODE("1385")"\n"

STUB_ASM_ENTRY("glLightf")"\n"
"\t"STUB_ASM_CODE("159")"\n"

STUB_ASM_ENTRY("glLightfv")"\n"
"\t"STUB_ASM_CODE("160")"\n"

STUB_ASM_ENTRY("glLightx")"\n"
"\t"STUB_ASM_CODE("1386")"\n"

STUB_ASM_ENTRY("glLightxv")"\n"
"\t"STUB_ASM_CODE("1387")"\n"

STUB_ASM_ENTRY("glLineWidth")"\n"
"\t"STUB_ASM_CODE("168")"\n"

STUB_ASM_ENTRY("glLineWidthx")"\n"
"\t"STUB_ASM_CODE("1388")"\n"

STUB_ASM_ENTRY("glLoadIdentity")"\n"
"\t"STUB_ASM_CODE("290")"\n"

STUB_ASM_ENTRY("glLoadMatrixf")"\n"
"\t"STUB_ASM_CODE("291")"\n"

STUB_ASM_ENTRY("glLoadMatrixx")"\n"
"\t"STUB_ASM_CODE("1389")"\n"

STUB_ASM_ENTRY("glLogicOp")"\n"
"\t"STUB_ASM_CODE("242")"\n"

STUB_ASM_ENTRY("glMaterialf")"\n"
"\t"STUB_ASM_CODE("169")"\n"

STUB_ASM_ENTRY("glMaterialfv")"\n"
"\t"STUB_ASM_CODE("170")"\n"

STUB_ASM_ENTRY("glMaterialx")"\n"
"\t"STUB_ASM_CODE("1390")"\n"

STUB_ASM_ENTRY("glMaterialxv")"\n"
"\t"STUB_ASM_CODE("1391")"\n"

STUB_ASM_ENTRY("glMatrixMode")"\n"
"\t"STUB_ASM_CODE("293")"\n"

STUB_ASM_ENTRY("glMultMatrixf")"\n"
"\t"STUB_ASM_CODE("294")"\n"

STUB_ASM_ENTRY("glMultMatrixx")"\n"
"\t"STUB_ASM_CODE("1392")"\n"

STUB_ASM_ENTRY("glMultiTexCoord4f")"\n"
"\t"STUB_ASM_CODE("402")"\n"

STUB_ASM_ENTRY("glMultiTexCoord4x")"\n"
"\t"STUB_ASM_CODE("1393")"\n"

STUB_ASM_ENTRY("glNormal3f")"\n"
"\t"STUB_ASM_CODE("56")"\n"

STUB_ASM_ENTRY("glNormal3x")"\n"
"\t"STUB_ASM_CODE("1394")"\n"

STUB_ASM_ENTRY("glNormalPointer")"\n"
"\t"STUB_ASM_CODE("318")"\n"

STUB_ASM_ENTRY("glOrthof")"\n"
"\t"STUB_ASM_CODE("1395")"\n"

STUB_ASM_ENTRY("glOrthox")"\n"
"\t"STUB_ASM_CODE("1396")"\n"

STUB_ASM_ENTRY("glPixelStorei")"\n"
"\t"STUB_ASM_CODE("250")"\n"

STUB_ASM_ENTRY("glPointParameterf")"\n"
"\t"STUB_ASM_CODE("425")"\n"

STUB_ASM_ENTRY("glPointParameterfv")"\n"
"\t"STUB_ASM_CODE("426")"\n"

STUB_ASM_ENTRY("glPointParameterx")"\n"
"\t"STUB_ASM_CODE("1415")"\n"

STUB_ASM_ENTRY("glPointParameterxv")"\n"
"\t"STUB_ASM_CODE("1416")"\n"

STUB_ASM_ENTRY("glPointSize")"\n"
"\t"STUB_ASM_CODE("173")"\n"

STUB_ASM_ENTRY("glPointSizePointerOES")"\n"
"\t"STUB_ASM_CODE("1087")"\n"

STUB_ASM_ENTRY("glPointSizex")"\n"
"\t"STUB_ASM_CODE("1397")"\n"

STUB_ASM_ENTRY("glPolygonOffset")"\n"
"\t"STUB_ASM_CODE("319")"\n"

STUB_ASM_ENTRY("glPolygonOffsetx")"\n"
"\t"STUB_ASM_CODE("1398")"\n"

STUB_ASM_ENTRY("glPopMatrix")"\n"
"\t"STUB_ASM_CODE("297")"\n"

STUB_ASM_ENTRY("glPushMatrix")"\n"
"\t"STUB_ASM_CODE("298")"\n"

STUB_ASM_ENTRY("glReadPixels")"\n"
"\t"STUB_ASM_CODE("256")"\n"

STUB_ASM_ENTRY("glRotatef")"\n"
"\t"STUB_ASM_CODE("300")"\n"

STUB_ASM_ENTRY("glRotatex")"\n"
"\t"STUB_ASM_CODE("1399")"\n"

STUB_ASM_ENTRY("glSampleCoverage")"\n"
"\t"STUB_ASM_CODE("419")"\n"

STUB_ASM_ENTRY("glSampleCoveragex")"\n"
"\t"STUB_ASM_CODE("1400")"\n"

STUB_ASM_ENTRY("glScalef")"\n"
"\t"STUB_ASM_CODE("302")"\n"

STUB_ASM_ENTRY("glScalex")"\n"
"\t"STUB_ASM_CODE("1401")"\n"

STUB_ASM_ENTRY("glScissor")"\n"
"\t"STUB_ASM_CODE("176")"\n"

STUB_ASM_ENTRY("glShadeModel")"\n"
"\t"STUB_ASM_CODE("177")"\n"

STUB_ASM_ENTRY("glStencilFunc")"\n"
"\t"STUB_ASM_CODE("243")"\n"

STUB_ASM_ENTRY("glStencilMask")"\n"
"\t"STUB_ASM_CODE("209")"\n"

STUB_ASM_ENTRY("glStencilOp")"\n"
"\t"STUB_ASM_CODE("244")"\n"

STUB_ASM_ENTRY("glTexCoordPointer")"\n"
"\t"STUB_ASM_CODE("320")"\n"

STUB_ASM_ENTRY("glTexEnvf")"\n"
"\t"STUB_ASM_CODE("184")"\n"

STUB_ASM_ENTRY("glTexEnvfv")"\n"
"\t"STUB_ASM_CODE("185")"\n"

STUB_ASM_ENTRY("glTexEnvi")"\n"
"\t"STUB_ASM_CODE("186")"\n"

STUB_ASM_ENTRY("glTexEnviv")"\n"
"\t"STUB_ASM_CODE("187")"\n"

STUB_ASM_ENTRY("glTexEnvx")"\n"
"\t"STUB_ASM_CODE("1402")"\n"

STUB_ASM_ENTRY("glTexEnvxv")"\n"
"\t"STUB_ASM_CODE("1403")"\n"

STUB_ASM_ENTRY("glTexImage2D")"\n"
"\t"STUB_ASM_CODE("183")"\n"

STUB_ASM_ENTRY("glTexParameterf")"\n"
"\t"STUB_ASM_CODE("178")"\n"

STUB_ASM_ENTRY("glTexParameterfv")"\n"
"\t"STUB_ASM_CODE("179")"\n"

STUB_ASM_ENTRY("glTexParameteri")"\n"
"\t"STUB_ASM_CODE("180")"\n"

STUB_ASM_ENTRY("glTexParameteriv")"\n"
"\t"STUB_ASM_CODE("181")"\n"

STUB_ASM_ENTRY("glTexParameterx")"\n"
"\t"STUB_ASM_CODE("1404")"\n"

STUB_ASM_ENTRY("glTexParameterxv")"\n"
"\t"STUB_ASM_CODE("1417")"\n"

STUB_ASM_ENTRY("glTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("333")"\n"

STUB_ASM_ENTRY("glTranslatef")"\n"
"\t"STUB_ASM_CODE("304")"\n"

STUB_ASM_ENTRY("glTranslatex")"\n"
"\t"STUB_ASM_CODE("1405")"\n"

STUB_ASM_ENTRY("glVertexPointer")"\n"
"\t"STUB_ASM_CODE("321")"\n"

STUB_ASM_ENTRY("glViewport")"\n"
"\t"STUB_ASM_CODE("305")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
#endif /* MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN */

