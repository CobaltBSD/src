#!/usr/bin/env zsh

# Adapted from Linux From Scratch's make-ca

PKIDIR=/etc/pki
SSLDIR=/etc/ssl
MD5SUM=/usr/bin/md5sum
OPENSSL=/usr/bin/openssl
TRUST=/usr/bin/trust
ANCHORDIR="${PKIDIR}/anchors"
ANCHORLIST="${PKIDIR}/anchors/md5sums"
BUNDLEDIR="${PKIDIR}/tls/certs"
CABUNDLE="${BUNDLEDIR}/ca-bundle.crt"
SMBUNDLE="${BUNDLEDIR}/email-ca-bundle.crt"
CSBUNDLE="${BUNDLEDIR}/objsign-ca-bundle.crt"
CERTDIR="${SSLDIR}/certs"
KEYSTORE="${PKIDIR}/tls/java"
NSSDB="${PKIDIR}/nssdb"
LOCALDIR="${SSLDIR}/local"
DESTDIR=
URL=https://hg.mozilla.org/releases/mozilla-release/raw-file/default/security/nss/lib/ckfw/builtins/certdata.txt

TEMPDIR=$(mktemp -d)
WORKDIR="${TEMPDIR}/work"
CERTDATAY=0
FORCE=0
GET=1
REBUILD=0
WITH_P12=0
WITH_NSS=0
WITH_CS=0
CERTDATA="${TEMPDIR}/certdatanew.txt"

convert_trust() {
	case $1 in
		CKT_NSS_TRUSTED_DELEGATOR)
			echo "C"
			;;
		CKT_NSS_NOT_TRUSTED)
			echo "p"
			;;
		CKT_NSS_MUST_VERIFY_TRUST)
			echo ""
			;;
	esac
}

convert_moz_distrust() {
	# SERVER
	val=$(grep "CKA_NSS_SERVER_DISTRUST_AFTER" "${1}" | cut -d " " -f 2)
	if [[ "${val}" == "CK_BBOOL" ]]; then
		val=$(grep "CKA_NSS_SERVER_DISTRUST_AFTER" "${1}" | cut -d " " -f 3)
		if [[ "${val}" == "CK_FALSE" ]]; then
			mozsadistrust="%00"
		else
			mozsadistrust="UNKNOWN"
		fi
	elif [[ "${val}" == "MULTILINE_OCTAL" ]]; then
		mozsadistrust=`printf $(grep -A1 "CKA_NSS_SERVER_DISTRUST_AFTER" "${1}" | tail -n1)`
	else
		mozsadistrust="UNKNOWN"
	fi

	# EMAIL
	val=$(grep "CKA_NSS_EMAIL_DISTRUST_AFTER" "${1}" | cut -d " " -f 2)
	if [[ "${val}" == "CK_BBOOL" ]]; then
		val=$(grep "CKA_NSS_EMAIL_DISTRUST_AFTER" "${1}" | cut -d " " -f 3)
		if [[ "${val}" == "CK_FALSE" ]]; then
			mozsmdistrust="%00"
		else
			mozsmdistrust="UNKNOWN"
		fi
	elif [[ "${val}" == "MULTILINE_OCTAL" ]]; then
		mozsmdistrust=`printf $(grep -A1 "CKA_NSS_EMAIL_DISTRUST_AFTER" "${1}" | tail -n1)`
	else
		mozsmdistrust="UNKNOWN"
	fi
	unset val
}

get_trust_values() {
	# $1 == individual certificate extracted from NSS certdata.txt

	# Determine certificate trust values for SSL/TLS, S/MIME, and Code Signing
	satrust="$(convert_trust `grep '^CKA_TRUST_SERVER_AUTH' ${1} | cut -d " " -f 3`)"
	smtrust="$(convert_trust `grep '^CKA_TRUST_EMAIL_PROTECTION' ${1} | cut -d " " -f 3`)"
	cstrust="$(convert_trust `grep '^CKA_TRUST_CODE_SIGNING' ${1} | cut -d " " -f 3`)"
	if [[ "${WITH_CS}" -eq "1" ]]; then
		if [[ "${cstrust}" == "" ]]; then
			cstrust=$(grep -q "^${keyhash}" "${SSLDIR}/CS.txt" && echo "C")
		fi
	fi

	# Not currently included in NSS certdata.txt
	#catrust="$(convert_trust `grep '^CKA_TRUST_CLIENT_AUTH' ${1} | cut -d " " -f 3`)"

	# Determine distrust values
	convert_moz_distrust ${1}
}

test ! -x "${OPENSSL}" && echo "OpenSSL not found at ${OPENSSL}. Exiting..." && exit 1
mkdir -p "${TEMPDIR}"/{certs,pki/anchors,work}

# Download new certdata.txt
echo -n "Checking for new version of certdata.txt..."
HOST=$(echo "${URL}" | /usr/bin/cut -d / -f 3)
_url=$(echo "${URL}" | sed 's@raw-file@log@')
echo GET ${_url} | ${OPENSSL} s_client -ign_eof -connect ${HOST}:443 2> /dev/null > "${TEMPDIR}/certdata.txt.log"
unset _url
echo "done."

# Error out here if we couldn't get the file
grep -m1 "<i>" "${TEMPDIR}/certdata.txt.log" > /dev/null 2>&1
if test "$?" -gt 0; then
	echo "Unable to get revision from server! Exiting."
	exit 1
fi

# See if we need to update before downloading the file
REVISION=$(grep -m1 "<i>" "${TEMPDIR}/certdata.txt.log" | cut -d "<" -f 1)
if test -e "${DESTDIR}${SSLDIR}/certdata.txt"; then
	OLDVERSION=$(grep "^# Revision:" "${DESTDIR}${SSLDIR}/certdata.txt" | cut -d ":" -f 2)
	if [[ "${OLDVERSION}x" == "${REVISION}x" ]]; then
		echo "No update required! Press enter to continue anyways."
		read
	fi
fi

get_p11_label() {
	# $1 == individual nss certificate extracted from certdata.txt or x509 certificate with OpenSSL text values

	# Start with the label assigned by Mozilla
	p11label=$(grep -m1 "^CKA_LABEL" ${1} | cut -d '"' -f 2 | sed 's@"@@g')

	# If not coming from certdata.txt, get from x509 Subject line
	if [[ "${p11label}" == "" ]]; then
		# Get the subject line for any certs and do some early normalization
		subjectline=$(grep -m1 "Subject:" ${1} | sed -e 's@\s*=\s&@=@g' -e "s@(@ - @g" -e "s@)@ - @g" -e 's@\\@-@g' )

		# Try for CN Next (and further normalize) if not from certdata.txt
		p11label="$(echo ${subjectline} | grep -o "CN=.*$" | cut -d '=' -f 2 | sed -e 's@[A-Z]*$@@g' -e 's@, $@@' -e 's@"@@g' -e s@,@@g' -e s@ $@@')"

		# Fallback to the last OU value if CN does not exist in Subject string
		## Special case for GlobalSign certs
		if [[ "${p11label}" == "" ]]; then
			p11label="$(echo ${subjectline} | grep -o "OU=.*$" | sed 's@OU=.*, OU=@OU=@g'| cut -d '=' -f 2 | sed -e 's@[A-Z]*$@@' -e 's@, $@@' -e 's@"@@g' -e 's@,@@g' -e 's@ $@@')"

			# If still empty, fall back to Object value as a last resort
			if [[ "${p11label}" == "" ]]; then
				p11label="$(echo ${subjectline} | grep -o "O=.*$" | cut -d '=' -f 2 | sed -e 's@[A-Z]*$@@g' -e 's@, $@@' -e 's@"@@g' -e 's@,@@g' -e 's@ $@@')"
			fi
		fi
	fi
}

# Define p11-kit ext value constants (see p11-kit API documentation)
get_p11_val() {
	case $1 in
		p11sasmcs)
			p11value="0%2a%06%03U%1d%25%01%01%ff%04 0%1e%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
			;;

		p11sasm)
			p11value="0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01"
			;;

		p11sacs)
			p11value="0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
			;;

		p11sa)
			p11value="0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%01"
			;;

		p11smcs)
			p11value="0 %06%03U%1d%25%01%01%ff%04%160%14%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%03"
			;;

		p11sm)
			p11value="0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%04"
			;;

		p11cs)
			p11value="0%16%06%03U%1d%25%01%01%ff%04%0c0%0a%06%08%2b%06%01%05%05%07%03%03"
			;;

		p11)
			p11value="0%18%06%03U%1d%25%01%01%ff%04%0e0%0c%06%0a%2b%06%01%04%01%99w%06%0a%10"
			;;
	esac
}


get_p11_trust() {
	# if distrusted at all, x-distrusted
	if [[ "${satrust}" == "p" || "${smtrust}" == "p" || "${cstrust}" == "p" ]]; then
		# if any distrusted, x-distrusted
		p11trust="x-distrusted: true"
		p11oid="1.3.6.1.4.1.3319.6.10.1"
		p11value="0.%06%0a%2b%06%01%04%01%99w%06%0a%01%04 0%1e%06%08%2b%06%01%05%05%07%03%04%06%08%2b%06%01%05%05%07%03%01%06%08%2b%06%01%05%05%07%03%03"
	else
		p11trust="trusted: true"
		p11oid="2.5.29.37"
		trustp11="p11"
		if [[ "${satrust}" == "C" ]]; then
			trust11="${trustp11}sa"
		fi
		if [[ "${smtrust}" == "C" ]]; then
			trust11="${trustp11}sm"
		fi
		if [[ "${cstrust}" == "C" ]]; then
			trust11="${trustp11}cs"
		fi
		get_p11_val "${trustp11}"
	fi
}

write_anchor() {
	echo "[p11-kit-object-v1]" >> "${anchorfile}"
	echo "label: \"${p11label}\"" >> "${anchorfile}"
	echo "class: x-certificate-extension" >> "${anchorfile}"
	echo "object-id: ${p11oid}" >> "${anchorfile}"
	echo "value: \"${p11value}\"" >> "${anchorfile}"
	echo "modifiable: false" >> "${anchorfile}"
	echo "${certkey}" >> "${anchorfile}"
	echo "" >> "${anchorfile}"
	echo "[p11-kit-object-v1]" >> "${anchorfile}"
	echo "label: \"${p11label}\"" >> "${anchorfile}"
	echo "${p11trust}" >> "${anchorfile}"
	echo "nss-mozilla-ca-policy: ${moz_trust}" >> "${anchorfile}"
	echo "modifiable: false" >> "${anchorfile}"
	if [[ "${mozsadistrust}" != "UNKNOWN" ]]; then
		echo "nss-server-distrust-after: \"${mozsadistrust}\"" >> "${anchorfile}"
	fi
	if [[ "${mozsmdistrust}" != "UNKNOWN" ]]; then
		echo "nss-email-distrust-after: \"${mozsmdistrust}\"" >> "${anchorfile}"
	fi
	echo "${certcer}" >> "${anchorfile}"
	echo "${certtxt}" | sed 's@^@#@' >> "${anchorfile}"
	echo "Added to p11-kit anchor directory with trust '${satrust},${smtrust},${cstrust}'."
}

# Download the new file
echo -n "Downloading certdata.txt..."
echo GET ${URL} | ${OPENSSL} s_client -ign_eof -connect ${HOST}:443 2> /dev/null >> "${CERTDATA}"
_line=$(( $(grep -n "certdata.txt" "${CERTDATA}" | cut -d ":" -f 1) - 1))
sed -e "1,${_line}d" -i "${CERTDATA}"
echo "# Revision:${REVISION}" | cat - "${CERTDATA}" | sponge "${CERTDATA}"
echo "done."

cat "${CERTDATA}" >> "${WORKDIR}/certdata.txt"
pushd "${WORKDIR}" > /dev/null 2>&1

# Get a list of starting lines for each cert
export IFS=$'\n'
CERTBEGINLIST=(`grep -n "^# Certificate" "${WORKDIR}/certdata.txt" | cut -d ":" -f1`)
unset IFS

# Dump individual certs to temp file
for certbegin in ${CERTBEGINLIST}; do
	awk "NR==$certbegin,/^CKA_TRUST_STEP_UP_APPROVED/" "${WORKDIR}/certdata.txt" > "${TEMPDIR}/certs/${certbegin}.tmp"
done

unset CERTBEGINLIST certbegin

for tempfile in ${TEMPDIR}/certs/*.tmp; do
	# Convert to a PEM formatted certificate
	printf $(awk '/^CKA_VALUE/{flag=1;next}/^END/{flag=0}flag{printf $0}' "${tempfile}") | "${OPENSSL}" x509 -text -inform DER -fingerprint > tempfile.crt

	# Get individual values for certificates
	certkey="$(${OPENSSL} x509 -in tempfile.crt -noout -pubkey)"
	certcer="$(${OPENSSL} x509 -in tempfile.crt)"
	certtxt="$(${OPENSSL} x509 -in tempfile.crt -noout -text)"
	keyhash="$(${OPENSSL} x509 -noout -in tempfile.crt -hash)"

	# Get trust values for the certificate
	get_trust_values "${tempfile}"

	# Get p11-kit label, oid and values
	get_p11_label "${tempfile}"

	# Get p11 trust and OID values
	get_p11_trust

	# Print information about cert
	echo "Certificate:  ${p11label}"
	echo "Keyhash:      ${keyhash}"

	# Place certificate into trust anchors dir
	anchorfile="${TEMPDIR}/pki/anchors/${keyhash}.p11-kit"
	moz_trust="true"
	write_anchor

	# Clean up the directory and environment as we go
	rm -f tempfile.crt
	unset keyhash subject count
	unset mozsadistrust mozsmdistrust anchorfile moz_trust
	unset trustlist rejectlist satrust smtrust cstrust catrust
	unset p11trust p11oid p11value trustp11 p11label

	echo -e "\n"
done
unset tempfile

# Backup any anchors with PKIX extensions - any object-id that is not 2.5.29.37
# only do if anchordir already exists
if [[ -d "${DESTDIR}${ANCHORDIR}" ]]; then
	mkdir -p ${TEMPDIR}/override
	for file in $( grep -r "^object-id: 2\.5\.29\.[0-9]" "${DESTDIR}${ANCHORDIR}" | grep -v "2\.5\.29\.37" | cut -d ":" -f 1); do
		cp "${file}" "${TEMPDIR}/override/"
	done
fi

# Install anchors in $ANCHORDIR
if [[ -d "${DESTDIR}/${ANCHORDIR}" ]]; then
	rm -rf "${DESTDIR}${ANCHORDIR}"
fi
install -dm755 "${DESTDIR}${ANCHORDIR}"
install -m644 "${TEMPDIR}"/pki/anchors/*.p11-kit "${DESTDIR}${ANCHORDIR}"

# Restore anchors with PKIX extensions
if [[ -f "${TEMPDIR}"/override/*.p11-kit ]]; then
	cp "${TEMPDIR}"override/*.p11-kit "${DESTDIR}${ANCHORDIR}"
fi

# Import any certs in $LOCALDIR
# Don't do any checking, just trust the admin
if [[ -d "${LOCALDIR}" ]]; then
	echo "Processing local certificates..."
	for cert in `find "${LOCALDIR}" -name "*.pem"`; do
		# Get some information about the certificate
		get_p11_label ${cert}
		keyhash=$("${OPENSSL}" x509 -noout -in "${cert}" -hash)
		subject=$("${OPENSSL}" x509 -noout -in "${cert}" -subject)
		if [[ "${p11label}" == "" ]]; then
			# This will always be OpenSSL, values will be separated by spaces
			p11label=$( echo "${subject}" | grep -o "CN = .*" | sed 's@CN = @@' | cut -d "," -f 1)
		fi
		echo "Certificate:  ${p11label}"
		echo "Keyhash:      ${keyhash}"

		# Get trust information
		trustlist=$("${OPENSSL}" x509 -in "${cert}" -text -trustout | grep -A1 "Trusted Uses")
		satrust=""
		smtrust=""
		cstrust=""
		catrust=""
		satrust=$(echo "${trustlist}" | grep "TLS Web Server" > /dev/null 2>&1 && echo "C")
		smtrust=$(echo "${trustlist}" | grep "E-mail Protection" > /dev/null 2>&1 && echo "C")
		cstrust=$(echo "${trustlist}" | grep "Code Signing" > /dev/null 2>&1 && echo "C")
		if [[ "${WITH_CS}" -eq "1" ]]; then
			if [[ "${cstrust}" == "" ]]; then
				cstrust=$(grep -q "^${keyhash}" "${SSLDIR}/CS.txt" && echo "C")
			fi
		fi
		catrust=$(echo "${trustlist}" | grep "Client Auth" > /dev/null 2>&1 && echo "C")

		# Get reject information
		rejectlist=$("${OPENSSL}" x509 -in "${cert}" -text -trustout | grep -A1 "Rejected Uses")
		if [[ "${satrust}" == "" ]]; then satrust=$(echo "${rejectlist}" | grep "TLS Web Server" > /dev/null 2>&1 && echo "p"); fi
		if [[ "${smtrust}" == "" ]]; then smtrust=$(echo "${rejectlist}" | grep "E-mail Protection" > /dev/null 2>&1 && echo "p"); fi
		if [[ "${cstrust}" == "" ]]; then cstrust=$(echo "${rejectlist}" | grep "Code Signing" > /dev/null 2>&1 && echo "p"); fi
		if [[ "${catrust}" == "" ]]; then catrust=$(echo "${rejectlist}" | grep "Client Auth" > /dev/null 2>&1 && echo "p"); fi

		# Get individual values for certificates
		certkey="$(${OPENSSL} x509 -in ${cert} -noout -pubkey)"
		certcer="$(${OPENSSL} x509 -in ${cert})"
		certtxt="$(${OPENSSL} x509 -in ${cert} -noout -text)"

		# Get p11 trust and OID values
		get_p11_trust

		# Place certificate into trust anchors dir
		anchorfile="${DESTDIR}${ANCHORDIR}/${keyhash}.p11-kit"
		moz_trust="false"
		mozsadistrust="UNKNOWN"
		mozsmdistrust="UNKNOWN"
		write_anchor

		# Generate working copy
		"${OPENSSL}" x509 -in "${cert}" -text -fingerprint > tempfile.crt

		unset keyhash subject count
		unset mozsadistrust mozsmdistrust anchorfile moz_trust
		unset trustlist rejectlist satrust smtrust cstrust catrust
		unset p11trust p11oid p11value trustp11 p11label
		echo -e "\n"
	done
	unset cert
fi

# Install certdata.txt
install -dm755 "${DESTDIR}${SSLDIR}"
install -m644 "${WORKDIR}/certdata.txt" "${DESTDIR}${SSLDIR}/certdata.txt"

# Clean up the mess
popd > /dev/null 2>&1
rm -rf "${TEMPDIR}"
# Build ANCHORLIST
for SUM in $(ls -1 "${DESTDIR}${ANCHORDIR}"); do
	cat "${DESTDIR}${ANCHORDIR}/${SUM}" | "${MD5SUM}" >> "${DESTDIR}${ANCHORLIST}"
done

# Build alternate formats using p11-kit trust
install -dm755 "${DESTDIR}${CERTDIR}" "${DESTDIR}${BUNDLEDIR}" "${DESTDIR}${KEYSTORE}"
echo "Extracting OpenSSL certificates to:"
echo -n "${DESTDIR}${CERTDIR}..."
"${TRUST}" extract --filter=ca-anchors --format=openssl-directory --overwrite --comment "${DESTDIR}${CERTDIR}" && echo "Done!" || echo "Failed!!!"
echo "Extracting GNUTLS server auth certificates to:"
echo -n "${DESTDIR}${CABUNDLE}..."
"${TRUST}" extract --filter=ca-anchors --format=pem-bundle --purpose server-auth --overwrite --comment "${DESTDIR}${CABUNDLE}" && echo "Done!" || echo "Failed!!!"
echo "Extracting GNUTLS S-Mime certificates to:"
echo -n "${DESTDIR}${SMBUNDLE}..."
"${TRUST}" extract --filter=ca-anchors --format=pem-bundle --purpose email --overwrite --comment "${DESTDIR}${SMBUNDLE}" && echo "Done!" || echo "Failed!!!"
echo "Extracting GNUTLS code signing certificates to:"
echo -n "${DESTDIR}${CSBUNDLE}..."
"${TRUST}" extract --filter=ca-anchors --format=pem-bundle --purpose code-signing --overwrite --comment "${DESTDIR}${CSBUNDLE}" && echo "Done!" || echo "Failed!!!"
echo "Extracting Java cacerts (JKS) to:"
echo -n "${DESTDIR}${KEYSTORE}/cacerts..."
"${TRUST}" extract --filter=ca-anchors --format=java-cacerts --purpose server-auth --overwrite --comment "${DESTDIR}${KEYSTORE}/cacerts" && echo "Done!" || echo "Failed!!!"
