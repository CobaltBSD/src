--- a/src/font.c
+++ b/src/font.c
@@ -13,15 +13,9 @@
 #include "error.h"
 #include "misc.h"
 
-#ifdef USE_PANGO
-#  include <pango/pango.h>
-#  include <pango/pangoxft.h>
-#  include <pango/pangofc-fontmap.h>
+#ifdef USE_XFT
 #  include <fontconfig/fontconfig.h>
 #endif
-#ifndef PANGO_VERSION_CHECK
-#  define PANGO_VERSION_CHECK(a, b, c) 0
-#endif
 
 #ifdef USE_ICONV
 #  ifdef HAVE_LANGINFO_H
@@ -32,7 +26,7 @@
 #  endif
 #endif
 
-#ifdef USE_PANGO
+#ifdef USE_XFT
 static const char *DEFAULT_FONT = "12";
 #else
 static const char *DEFAULT_FONT = "fixed";
@@ -51,24 +45,21 @@
 static char *GetUTF8String(const char *str);
 static void ReleaseUTF8String(char *utf8String);
 
+static char *fontNames[FONT_COUNT];
+
 #ifdef USE_ICONV
 static const char *UTF8_CODESET = "UTF-8";
 static iconv_t fromUTF8 = (iconv_t)-1;
 static iconv_t toUTF8 = (iconv_t)-1;
 #endif
 
-#ifdef USE_PANGO
-static PangoLayout *fonts[FONT_COUNT];
-static int font_heights[FONT_COUNT];
-static int font_ascents[FONT_COUNT];
-static PangoFontMap *font_map;
-static PangoContext *font_context;
+#ifdef USE_XFT
+static XftFont *fonts[FONT_COUNT];
 #else
 static XFontStruct *fonts[FONT_COUNT];
 #endif
-static char *fontNames[FONT_COUNT];
 
-#ifdef USE_PANGO
+#ifdef USE_XFT
 static int IsXlfd(const char *str);
 #endif
 
@@ -114,18 +105,17 @@
       }
    }
 
-#ifdef USE_PANGO
-   font_map = pango_xft_get_font_map(display, rootScreen);
-#  if PANGO_VERSION_CHECK(1, 22, 0)
-   font_context = pango_font_map_create_context(font_map);
-#  else
-   font_context = pango_context_new();
-   pango_context_set_font_map(font_context, font_map);
-#  endif
-#endif
-
    for(x = 0; x < FONT_COUNT; x++) {
-#ifdef USE_PANGO
+#ifdef USE_XFT
+     if(fontNames[x]) {
+	     fonts[x] = JXftFontOpenName(display, rootScreen, fontNames[x]);
+	     if(!fonts[x]) {
+		     fonts[x] = JXftFontOpenXlfd(display, rootScreen, fontNames[x]);
+	     }
+	     if(JUNLIKELY(!fonts[x])) {
+		     Warning(_("could not load font: %s"), fontNames[x]);
+	     }
+     }
       XftFont *font = NULL;
       if(fontNames[x]) {
          if(IsXlfd(fontNames[x])) {
@@ -141,33 +131,10 @@
       if(!font) {
          font = JXftFontOpenName(display, rootScreen, DEFAULT_FONT);
       }
-      if(JLIKELY(font)) {
-         PangoFontMetrics *metrics;
-         PangoFontDescription *desc;
-
-         desc = pango_fc_font_description_from_pattern(font->pattern, TRUE);
-         JXftFontClose(display, font);
-
-         fonts[x] = pango_layout_new(font_context);
-         pango_layout_set_font_description(fonts[x], desc);
-
-         pango_layout_set_single_paragraph_mode(fonts[x], TRUE);
-         pango_layout_set_width(fonts[x], -1);
-         pango_layout_set_ellipsize(fonts[x], PANGO_ELLIPSIZE_MIDDLE);
-
-         metrics = pango_context_get_metrics(font_context, desc, NULL);
-         font_ascents[x] = pango_font_metrics_get_ascent(metrics);
-         font_heights[x] = font_ascents[x]
-            + pango_font_metrics_get_descent(metrics);
-
-         pango_font_description_free(desc);
-         pango_font_metrics_unref(metrics);
-        
-      } else {
-        font_ascents[x] = 0;
-        font_heights[x] = 0;
+      if(JUNLIKELY(!fonts[x])) {
+	      FatalError(_("could not load the default font: %s"), DEFAULT_FONT);
       }
-#else /* USE_PANGO */
+#else /* USE_XFT */
       if(fontNames[x]) {
          fonts[x] = JXLoadQueryFont(display, fontNames[x]);
          if(JUNLIKELY(!fonts[x] && fontNames[x])) {
@@ -177,7 +144,7 @@
       if(!fonts[x]) {
          fonts[x] = JXLoadQueryFont(display, DEFAULT_FONT);
       }
-#endif /* USE_PANGO */
+#endif /* USE_XFT */
       if(JUNLIKELY(!fonts[x])) {
          FatalError(_("could not load the default font: %s"), DEFAULT_FONT);
       }
@@ -191,19 +158,14 @@
    unsigned int x;
    for(x = 0; x < FONT_COUNT; x++) {
       if(fonts[x]) {
-#ifdef USE_PANGO
-         g_object_unref(fonts[x]);
-         fonts[x] = NULL;
+#ifdef USE_XFT
+	      JXftFontClose(display, fonts[x]);
 #else
          JXFreeFont(display, fonts[x]);
-         fonts[x] = NULL;
 #endif
+         fonts[x] = NULL;
       }
    }
-
-#ifdef USE_PANGO
-   g_object_unref(font_context);
-#endif
 }
 
 /** Destroy font data. */
@@ -229,7 +191,7 @@
 }
 
 /** Determine if a font string is likely XLFD. */
-#ifdef USE_PANGO
+#ifdef USE_XFT
 int IsXlfd(const char *str)
 {
    /* Valid XLFD should have 14 '-'s. */
@@ -313,26 +275,50 @@
 /** Get the width of a string. */
 int GetStringWidth(FontType ft, const char *str)
 {
+#ifdef USE_XFT
+	XGlyphInfo extents;
+#endif
+#ifdef USE_FRIBIDI
+	FriBidiChar *temp_i;
+	FriBidiChar *temp_o;
+	FriBidiParType type = FRIBIDI_PAR_ON;
+	int unicodeLength;
+#endif
+	int len;
+	char *output;
    char *utf8String;
    int result;
 
-#ifdef USE_PANGO
-   PangoRectangle rect;
-#endif
-
    /* Convert to UTF-8 if necessary. */
    utf8String = GetUTF8String(str);
 
-#ifdef USE_PANGO
-   pango_layout_set_text(fonts[ft], utf8String, -1);
-   pango_layout_set_width(fonts[ft], -1);
-   pango_layout_get_extents(fonts[ft], NULL, &rect);
-   result = (rect.width + PANGO_SCALE - 1) / PANGO_SCALE;
+   len = strlen(utf8String);
+
+#ifdef USE_FRIBIDI
+   temp_i = AllocateStack((len + 1) * sizeof(FriBidiChar));
+   temp_o = AllocateStack((len + 1) * sizeof(FriBidiChar));
+   unicodeLength = fribidi_charset_to_unicode(FRIBIDI_CHAR_SET_UTF8, utf8String, len, temp_i);
+   fribidi_log2vis(temp_i, unicodeLength, &type, temp_o, NULL, NULL, NULL);
+   output = AllocateStack(4 * len + 1);
+   fribidi_unicode_to_charset(FRIBIDI_CHAR_SET_UTF8, temp_o, unicodeLength, (char *) output);
+   len = strlen(output);
 #else
-   result = XTextWidth(fonts[ft], utf8String, strlen(utf8String));
+   output = utf8String;
 #endif
 
+#ifdef USE_XFT
+   JXftTextExtentsUtf8(display, fonts[ft], (const unsigned char*) output, len, &extents);
+   result = extents.xOff;
+#else
+   result = XTextWidth(fonts[ft], output, len);
+#endif
+
    /* Clean up. */
+#if USE_FRIBIDI
+   ReleaseStack(temp_i);
+   ReleaseStack(temp_o);
+   ReleaseStack(output);
+#endif
    ReleaseUTF8String(utf8String);
 
    return result;
@@ -341,11 +327,8 @@
 /** Get the height of a string. */
 int GetStringHeight(FontType ft)
 {
-#ifdef USE_PANGO
-   return PANGO_PIXELS(font_heights[ft]);
-#else
-   return fonts[ft]->ascent + fonts[ft]->descent;
-#endif
+	Assert(fonts[ft]);
+	return fonts[ft]->ascent + fonts[ft]->descent;
 }
 
 /** Set the font to use for a component. */
@@ -369,10 +352,16 @@
    Region renderRegion;
    int len;
    char *utf8String;
-#ifdef USE_PANGO
+   char *output;
+#ifdef USE_FRIBIDI
+   FriBidiChar *temp_i;
+   FriBidiChar *temp_o;
+   FriBidiParType type = FRIBIDI_PAR_ON;
+   int unicodeLength;
+#endif
+#ifdef USE_XFT
    XftDraw *xd;
-   PangoLayoutLine *line;
-   XftColor *xc;
+   XGlyphInfo extents;
 #else
    XGCValues gcValues;
    unsigned long gcMask;
@@ -398,41 +387,55 @@
    renderRegion = XCreateRegion();
    XUnionRectWithRegion(&rect, renderRegion, renderRegion);
 
-#ifdef USE_PANGO
+   len = strlen(utf8String);
 
-   pango_layout_set_text(fonts[font], str, -1);
-   pango_layout_set_width(fonts[font], width * PANGO_SCALE);
-
+#ifdef USE_XFT
    xd = XftDrawCreate(display, d, rootVisual, rootColormap);
    JXftDrawSetClip(xd, renderRegion);
-   xc = GetXftColor(color);
-#  if PANGO_VERSION_CHECK(1, 16, 0)
-   line = pango_layout_get_line_readonly(fonts[font], 0);
-#  else
-   line = pango_layout_get_line(fonts[font], 0);
-#  endif
-   pango_xft_render_layout_line(xd, xc, line, x * PANGO_SCALE,
-      y * PANGO_SCALE + font_ascents[font]);
-
-   JXftDrawDestroy(xd);
 #else
 
    gcMask = GCGraphicsExposures;
    gcValues.graphics_exposures = False;
    gc = JXCreateGC(display, d, gcMask, &gcValues);
+#endif
 
+#ifdef USE_FRIBIDI
+   temp_i = AllocateStack((len + 1) * sizeof(FriBidiChar));
+   temp_o = AllocateStack((len + 1) * sizeof(FriBidiChar));
+   unicodeLength = fribidi_charset_to_unicode(FRIBIDI_CHAR_SET_UTF8, utf8String, len, temp_i);
+   fribidi_log2vis(temp_i, unicodeLength, &type, temp_o, NULL, NULL, NULL);
+   output = AllocateStack(4 * len + 1);
+   fribidi_unicode_to_charset(FRIBIDI_CHAR_SET_UTF8, temp_o, unicodeLegth, (char *) output);
+   len = strlen(output);
+#else
+   output = utf8String;
+#endif
+
    /* Display the string. */
+#ifdef USE_XFT
+   JXftDrawSetClip(xd, renderRegion);
+   JXftDrawStringUtf8(xd, GetXftColor(color), fonts[font], x, y + fonts[font]->ascent, (const unsigned char *) output, len);
+   JXftDrawChange(xd, rootWindow);
+#else
    JXSetForeground(display, gc, colors[color]);
    JXSetRegion(display, gc, renderRegion);
    JXSetFont(display, gc, fonts[font]->fid);
    JXDrawString(display, d, gc, x, y + fonts[font]->ascent, utf8String, len);
-
-   JXFreeGC(display, gc);
 #endif
 
-   XDestroyRegion(renderRegion);
-
    /* Free any memory used for UTF conversion. */
+#ifdef USE_FRIBIDI
+   ReleaseStack(temp_i);
+   ReleaseStack(temp_o);
+   ReleaseStack(output);
+#endif
    ReleaseUTF8String(utf8String);
 
+   XDestroyRegion(renderRegion);
+
+#ifdef USE_XFT
+   XftDrawDestroy(xd);
+#else
+   JXFreeGC(display, gc);
+#endif
 }
